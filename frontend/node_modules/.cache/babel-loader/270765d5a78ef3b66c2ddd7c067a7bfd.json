{"ast":null,"code":"var _jsxFileName = \"/home/mihir/code/Wis/upload-download/frontend/src/Components/Upload/Upload.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Upload.css';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chunkSize = 10 * 1024;\n\nconst Upload = () => {\n  _s();\n\n  const [activeDropzone, setActveDropzone] = useState(false);\n  const [files, setFiles] = useState([]);\n  const [currentFileIndex, setCurrentFileIndex] = useState(null);\n  const [lastUploadedFileIndex, setLastUploadedFileIndex] = useState(null);\n  const [currentChunkIndex, setCurrentChunkIndex] = useState(null);\n\n  const onDragOver = e => {\n    e.preventDefault();\n    setActveDropzone(true);\n  };\n\n  const onDragLeave = e => {\n    e.preventDefault();\n    setActveDropzone(false);\n  };\n\n  const onDrag = e => {\n    e.preventDefault(); // setFiles([...files, ...e.dataTransfer.files]);\n  };\n\n  const onFileDrop = e => {\n    // console.log(e);\n    setFiles([...files, ...e.target.files]);\n  };\n\n  const readAndUploadCurrentChunk = () => {\n    const reader = new FileReader();\n    const file = files[currentFileIndex];\n\n    if (!file) {\n      return;\n    }\n\n    const chunkFrom = currentChunkIndex * chunkSize;\n    const chunkTo = chunkFrom + chunkSize;\n    const blob = file.slice(chunkFrom, chunkTo);\n\n    reader.onload = e => uploadChunks(e);\n\n    reader.readAsDataURL(blob);\n  };\n\n  const uploadChunks = readerEvent => {\n    const file = files[currentFileIndex];\n    const data = readerEvent.target.result;\n    const params = new URLSearchParams();\n    params.set('name', file.name);\n    params.set('size', file.size);\n    params.set('currentChunkIndex', currentChunkIndex);\n    params.set('totalChunks', Math.ceil(file.size / chunkSize));\n    const url = 'http://localhost:4000/upload?' + params.toString();\n    const headers = {\n      'Content-Type': 'application/octet-stream'\n    };\n    let config = {\n      headers\n    };\n    axios.post(url, data, config).then(response => {\n      const fileSize = file.size;\n      const isLastChunks = currentChunkIndex === Math.ceil(fileSize / chunkSize) - 1;\n\n      if (isLastChunks) {\n        file.finalFileName = response.data.finalFileName;\n        setLastUploadedFileIndex(currentFileIndex);\n        setCurrentChunkIndex(null);\n      } else {\n        setCurrentChunkIndex(currentChunkIndex + 1);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (lastUploadedFileIndex === null) {\n      return;\n    }\n\n    const isLastFile = lastUploadedFileIndex === files.length - 1;\n    const nextFileIndex = isLastFile ? null : currentFileIndex + 1;\n    setCurrentFileIndex(nextFileIndex);\n  }, [lastUploadedFileIndex]);\n  useEffect(() => {\n    if (files.length > 0) {\n      if (currentFileIndex === null) {\n        setCurrentFileIndex(lastUploadedFileIndex === null ? 0 : lastUploadedFileIndex + 1);\n      }\n    }\n  }, [files.length]);\n  useEffect(() => {\n    if (currentFileIndex !== null) {\n      setCurrentChunkIndex(0);\n    }\n  }, [currentFileIndex]);\n  useEffect(() => {\n    if (currentChunkIndex !== null) {\n      readAndUploadCurrentChunk();\n    }\n  }, [currentChunkIndex]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"uploadSection\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onDragOver: e => onDragOver(e),\n        onDragLeave: e => onDragLeave(e),\n        onDrag: e => onDrag(e),\n        className: 'dropzone' + (activeDropzone ? ' active' : ''),\n        children: \"Drop your files here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        value: \"\",\n        onChange: onFileDrop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"files\",\n        children: files.map((file, index) => {\n          let progress = 0;\n\n          if (file.finalFileName) {\n            progress = 100;\n          } else {\n            const uploading = index === currentFileIndex;\n            const chunks = Math.ceil(file.size / chunkSize);\n\n            if (uploading) {\n              progress = Math.round(currentChunkIndex / chunks * 100);\n            } else {\n              progress = 0;\n            }\n          }\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              rel: \"noreferrer\",\n              href: 'http://localhost:4000/uploads/' + file.finalFileName,\n              target: \"_blank\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"name\",\n                children: file.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: 'progress ' + (progress === 100 ? 'done' : ''),\n                style: {\n                  width: progress + '%'\n                },\n                children: [progress, \" %\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-text\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        rel: \"noreferrer\",\n        to: \"/download\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"uploadBtn\",\n          children: \"Download?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Upload, \"rMTb92Stg0Dp0ojmSa3bgruY2C0=\");\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"names":["useEffect","useState","axios","Link","chunkSize","Upload","activeDropzone","setActveDropzone","files","setFiles","currentFileIndex","setCurrentFileIndex","lastUploadedFileIndex","setLastUploadedFileIndex","currentChunkIndex","setCurrentChunkIndex","onDragOver","e","preventDefault","onDragLeave","onDrag","onFileDrop","target","readAndUploadCurrentChunk","reader","FileReader","file","chunkFrom","chunkTo","blob","slice","onload","uploadChunks","readAsDataURL","readerEvent","data","result","params","URLSearchParams","set","name","size","Math","ceil","url","toString","headers","config","post","then","response","fileSize","isLastChunks","finalFileName","isLastFile","length","nextFileIndex","map","index","progress","uploading","chunks","round","width"],"sources":["/home/mihir/code/Wis/upload-download/frontend/src/Components/Upload/Upload.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Upload.css';\nimport { Link } from 'react-router-dom';\n\nconst chunkSize = 10 * 1024;\n\nconst Upload = () => {\n    const [activeDropzone, setActveDropzone] = useState(false);\n    const [files, setFiles] = useState([]);\n    const [currentFileIndex, setCurrentFileIndex] = useState(null);\n    const [lastUploadedFileIndex, setLastUploadedFileIndex] = useState(null);\n    const [currentChunkIndex, setCurrentChunkIndex] = useState(null);\n\n    const onDragOver = (e) => {\n        e.preventDefault();\n        setActveDropzone(true);\n    };\n    const onDragLeave = (e) => {\n        e.preventDefault();\n        setActveDropzone(false);\n    };\n    const onDrag = (e) => {\n        e.preventDefault();\n        // setFiles([...files, ...e.dataTransfer.files]);\n    };\n    const onFileDrop = (e) => {\n        // console.log(e);\n        setFiles([...files, ...e.target.files]);\n    };\n    const readAndUploadCurrentChunk = () => {\n        const reader = new FileReader();\n        const file = files[currentFileIndex];\n        if (!file) {\n            return;\n        }\n        const chunkFrom = currentChunkIndex * chunkSize;\n        const chunkTo = chunkFrom + chunkSize;\n        const blob = file.slice(chunkFrom, chunkTo);\n        reader.onload = (e) => uploadChunks(e);\n        reader.readAsDataURL(blob);\n    };\n    const uploadChunks = (readerEvent) => {\n        const file = files[currentFileIndex];\n        const data = readerEvent.target.result;\n        const params = new URLSearchParams();\n        params.set('name', file.name);\n        params.set('size', file.size);\n        params.set('currentChunkIndex', currentChunkIndex);\n        params.set('totalChunks', Math.ceil(file.size / chunkSize));\n        const url = 'http://localhost:4000/upload?' + params.toString();\n        const headers = { 'Content-Type': 'application/octet-stream' };\n        let config = {\n            headers,\n        };\n        axios.post(url, data, config).then((response) => {\n            const fileSize = file.size;\n            const isLastChunks =\n                currentChunkIndex === Math.ceil(fileSize / chunkSize) - 1;\n            if (isLastChunks) {\n                file.finalFileName = response.data.finalFileName;\n                setLastUploadedFileIndex(currentFileIndex);\n                setCurrentChunkIndex(null);\n            } else {\n                setCurrentChunkIndex(currentChunkIndex + 1);\n            }\n        });\n    };\n    useEffect(() => {\n        if (lastUploadedFileIndex === null) {\n            return;\n        }\n        const isLastFile = lastUploadedFileIndex === files.length - 1;\n        const nextFileIndex = isLastFile ? null : currentFileIndex + 1;\n        setCurrentFileIndex(nextFileIndex);\n    }, [lastUploadedFileIndex]);\n    useEffect(() => {\n        if (files.length > 0) {\n            if (currentFileIndex === null) {\n                setCurrentFileIndex(\n                    lastUploadedFileIndex === null\n                        ? 0\n                        : lastUploadedFileIndex + 1\n                );\n            }\n        }\n    }, [files.length]);\n    useEffect(() => {\n        if (currentFileIndex !== null) {\n            setCurrentChunkIndex(0);\n        }\n    }, [currentFileIndex]);\n    useEffect(() => {\n        if (currentChunkIndex !== null) {\n            readAndUploadCurrentChunk();\n        }\n    }, [currentChunkIndex]);\n\n    return (\n        <section className=\"uploadSection\">\n            <div className=\"app-container\">\n                <div\n                    onDragOver={(e) => onDragOver(e)}\n                    onDragLeave={(e) => onDragLeave(e)}\n                    onDrag={(e) => onDrag(e)}\n                    className={'dropzone' + (activeDropzone ? ' active' : '')}\n                >\n                    Drop your files here\n                </div>\n                <input type=\"file\" value=\"\" onChange={onFileDrop} />\n                <div className=\"files\">\n                    {files.map((file, index) => {\n                        let progress = 0;\n                        if (file.finalFileName) {\n                            progress = 100;\n                        } else {\n                            const uploading = index === currentFileIndex;\n                            const chunks = Math.ceil(file.size / chunkSize);\n                            if (uploading) {\n                                progress = Math.round(\n                                    (currentChunkIndex / chunks) * 100\n                                );\n                            } else {\n                                progress = 0;\n                            }\n                        }\n                        return (\n                            <div key={index} className=\"file\">\n                                <a\n                                    rel=\"noreferrer\"\n                                    href={\n                                        'http://localhost:4000/uploads/' +\n                                        file.finalFileName\n                                    }\n                                    target=\"_blank\"\n                                >\n                                    <div className=\"name\">{file.name}</div>\n                                    <div\n                                        className={\n                                            'progress ' +\n                                            (progress === 100 ? 'done' : '')\n                                        }\n                                        style={{ width: progress + '%' }}\n                                    >\n                                        {progress} %\n                                    </div>\n                                </a>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n            <div className=\"container-text\">\n                <Link rel=\"noreferrer\" to=\"/download\">\n                    <button className=\"uploadBtn\">Download?</button>\n                </Link>\n            </div>\n        </section>\n    );\n};\n\nexport default Upload;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}